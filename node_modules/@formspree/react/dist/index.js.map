{"version":3,"sources":["../../formspree-core/src/index.ts","../../formspree-core/src/base64.js","../../formspree-core/src/forms.ts","../../formspree-core/src/utils.ts","../../formspree-core/src/session.ts","../../formspree-core/src/core.ts","../src/index.ts","../src/context.tsx","../src/useForm.ts","../src/ValidationError.tsx","../src/types.ts"],"sourcesContent":["export { Client, type Config, createClient, getDefaultClient } from './core'\nexport { isFieldError, type FormError, type SubmissionResponse, type SubmissionData, type ErrorBody, type FieldError } from './forms'\nexport { type Session } from './session'","const b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n\nexport function btoa(string) {\n  string = String(string);\n  var bitmap,\n    a,\n    b,\n    c,\n    result = '',\n    i = 0,\n    rest = string.length % 3; // To determine the final padding\n\n  for (; i < string.length; ) {\n    if (\n      (a = string.charCodeAt(i++)) > 255 ||\n      (b = string.charCodeAt(i++)) > 255 ||\n      (c = string.charCodeAt(i++)) > 255\n    )\n      throw new TypeError(\n        \"Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\"\n      );\n\n    bitmap = (a << 16) | (b << 8) | c;\n    result +=\n      b64.charAt((bitmap >> 18) & 63) +\n      b64.charAt((bitmap >> 12) & 63) +\n      b64.charAt((bitmap >> 6) & 63) +\n      b64.charAt(bitmap & 63);\n  }\n\n  // If there's need of padding, replace the last 'A's with equal signs\n  return rest ? result.slice(0, rest - 3) + '==='.substring(rest) : result;\n}\n\nexport function atob(string) {\n  // atob can work with strings with whitespaces, even inside the encoded part,\n  // but only \\t, \\n, \\f, \\r and ' ', which can be stripped.\n  string = String(string).replace(/[\\t\\n\\f\\r ]+/g, '');\n  if (!b64re.test(string))\n    throw new TypeError(\n      \"Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.\"\n    );\n\n  // Adding the padding if missing, for semplicity\n  string += '=='.slice(2 - (string.length & 3));\n  var bitmap,\n    result = '',\n    r1,\n    r2,\n    i = 0;\n  for (; i < string.length; ) {\n    bitmap =\n      (b64.indexOf(string.charAt(i++)) << 18) |\n      (b64.indexOf(string.charAt(i++)) << 12) |\n      ((r1 = b64.indexOf(string.charAt(i++))) << 6) |\n      (r2 = b64.indexOf(string.charAt(i++)));\n\n    result +=\n      r1 === 64\n        ? String.fromCharCode((bitmap >> 16) & 255)\n        : r2 === 64\n        ? String.fromCharCode((bitmap >> 16) & 255, (bitmap >> 8) & 255)\n        : String.fromCharCode(\n            (bitmap >> 16) & 255,\n            (bitmap >> 8) & 255,\n            bitmap & 255\n          );\n  }\n  return result;\n}\n","import { PaymentMethodResult } from '@stripe/stripe-js';\n\nexport type SubmissionData = FormData | any;\n\nexport interface SubmissionOptions {\n  endpoint?: string;\n  clientName?: string;\n  fetchImpl?: typeof fetch;\n  createPaymentMethod?: () => Promise<PaymentMethodResult>;\n}\n\nenum FormErrorCodeEnum {\n  INACTIVE = 'INACTIVE',\n  BLOCKED = 'BLOCKED',\n  EMPTY = 'EMPTY',\n  PROJECT_NOT_FOUND = 'PROJECT_NOT_FOUND',\n  FORM_NOT_FOUND = 'FORM_NOT_FOUND',\n  NO_FILE_UPLOADS = 'NO_FILE_UPLOADS',\n  TOO_MANY_FILES = 'TOO_MANY_FILES',\n  FILES_TOO_BIG = 'FILES_TOO_BIG',\n  STRIPE_CLIENT_ERROR = 'STRIPE_CLIENT_ERROR',\n  STRIPE_SCA_ERROR = 'STRIPE_SCA_ERROR'\n}\n\nenum FieldErrorCodeEnum {\n  REQUIRED_FIELD_MISSING = 'REQUIRED_FIELD_MISSING',\n  REQUIRED_FIELD_EMPTY = 'REQUIRED_FIELD_EMPTY',\n  TYPE_EMAIL = 'TYPE_EMAIL',\n  TYPE_NUMERIC = 'TYPE_NUMERIC',\n  TYPE_TEXT = 'TYPE_TEXT'\n}\n\nexport type FormErrorCode = keyof typeof FormErrorCodeEnum;\nexport type FieldErrorCode = keyof typeof FieldErrorCodeEnum;\n\nexport interface FormError {\n  field?: string;\n  code?: FormErrorCode | FieldErrorCode;\n  message: string;\n  details?: {\n    stripeCode?: string;\n  };\n}\n\nexport interface FieldError extends FormError {\n  field: string;\n  code: FieldErrorCode;\n}\n\nexport function isFieldError(error: FormError): error is FieldError {\n  return (\n    (error as FieldError).code in FieldErrorCodeEnum &&\n    (error as FieldError).field !== undefined\n  );\n}\n\ntype KnownError<T> = T extends\n  | { code: FormErrorCode }\n  | { code: FieldErrorCode }\n  ? T\n  : never;\n\nexport function isKnownError(error: FormError): error is KnownError<FormError> {\n  return (\n    !!error.code &&\n    (error.code in FormErrorCodeEnum || error.code in FieldErrorCodeEnum)\n  );\n}\n\nexport interface SuccessBody {\n  id: string;\n  data: object;\n}\n\nexport interface ErrorBody {\n  errors: FormError[];\n}\n\nexport type SubmissionBody = SuccessBody | ErrorBody;\n\nexport function hasErrors(body: SubmissionBody): body is ErrorBody {\n  return (body as ErrorBody).errors !== undefined;\n}\n\nexport interface SubmissionResponse {\n  body: SubmissionBody;\n  response: Response | null;\n}\n","// @ts-ignore\nimport { btoa } from './base64';\nimport { version } from '../package.json';\nimport { hasErrors, SubmissionResponse } from './forms';\nimport { PaymentMethod, Stripe } from '@stripe/stripe-js';\n\n/**\n * Base-64 encodes a (JSON-castable) object.\n *\n * @param obj - The object to encode.\n */\nexport const encode64 = (obj: object): string => {\n  return btoa(JSON.stringify(obj));\n};\n\n/**\n * Appends a key-value pair to a target.\n *\n * @param target - An object or FormData instance to mutate.\n * @param key - The key to append.\n * @param value - The value to append.\n */\nexport const append = (\n  target: { [key: string]: any } | FormData,\n  key: string,\n  value: string\n): void => {\n  if (target instanceof FormData) {\n    target.append(key, value);\n  } else {\n    target[key] = value;\n  }\n};\n\n/**\n * Converts a snake case string to camel case.\n *\n * @param str - A string to convert to camel case.\n */\nexport const toCamel = (str: string): string => {\n  return str.replace(/([-_][a-z])/gi, $1 => {\n    return $1\n      .toUpperCase()\n      .replace('-', '')\n      .replace('_', '');\n  });\n};\n\n/**\n * Converts the top-level keys of an object to camel case.\n * This function returns a new object (instead of mutating in place).\n *\n * @param obj - An object with string keys.\n */\nexport const camelizeTopKeys = (obj: {\n  [key: string]: any;\n}): { [key: string]: any } => {\n  let newObject: { [key: string]: any } = {};\n\n  for (let [key, value] of Object.entries(obj)) {\n    newObject[toCamel(key)] = value;\n  }\n\n  return newObject;\n};\n\n/**\n * Generates a client header.\n *\n * @param givenLabel\n */\nexport const clientHeader = (givenLabel: string | undefined): string => {\n  const label = `@formspree/core@${version}`;\n  if (!givenLabel) return label;\n  return `${givenLabel} ${label}`;\n};\n\n/**\n * The current timestamp.\n */\nexport const now = (): number => {\n  // @ts-ignore\n  return 1 * new Date();\n};\n\nexport const appendExtraData = (\n  formData: FormData | object,\n  prop: string,\n  value: string\n) => {\n  if (formData instanceof FormData) {\n    formData.append(prop, value);\n  } else {\n    formData = Object.assign(formData, { [prop]: value });\n  }\n};\n\ntype HandleSCAargs = {\n  stripePromise: Stripe;\n  response: Response;\n  responseData: any;\n  payload: {\n    paymentMethod: PaymentMethod;\n    error?: undefined;\n  };\n  data: FormData | object;\n  fetchImpl: (\n    input: RequestInfo,\n    init?: RequestInit | undefined\n  ) => Promise<Response>;\n  request: {\n    method: string;\n    mode: 'cors';\n    body: string | FormData;\n    headers: {\n      [key: string]: string;\n    };\n  };\n  url: string;\n};\n\nexport const handleSCA = async ({\n  stripePromise,\n  response,\n  responseData,\n  payload,\n  data,\n  fetchImpl,\n  request,\n  url\n}: HandleSCAargs): Promise<SubmissionResponse> => {\n  const stripeResult = await stripePromise.handleCardAction(\n    responseData.stripe.paymentIntentClientSecret\n  );\n\n  // Handle Stripe error\n  if (stripeResult.error) {\n    return {\n      response,\n      body: {\n        errors: [\n          {\n            code: 'STRIPE_CLIENT_ERROR',\n            message: 'Stripe SCA error',\n            field: 'paymentMethod'\n          }\n        ]\n      }\n    };\n  } else {\n    if (!payload.paymentMethod.id) {\n      appendExtraData(data, 'paymentMethod', payload.paymentMethod.id);\n    }\n    appendExtraData(data, 'paymentIntent', stripeResult.paymentIntent.id);\n    appendExtraData(data, 'resubmitKey', responseData.resubmitKey);\n\n    // Resubmit the form with the paymentIntent and resubmitKey\n    const resSubmitResponse = await fetchImpl(url, {\n      ...request,\n      body: JSON.stringify({\n        paymentIntent: stripeResult.paymentIntent.id,\n        resubmitKey: responseData.resubmitKey\n      })\n    });\n    const resSubmitData = await resSubmitResponse.json();\n\n    return {\n      response: resSubmitResponse,\n      body: resSubmitData\n    };\n  }\n};\n\nexport function handleLegacyErrorPayload({\n  body,\n  response\n}: SubmissionResponse): SubmissionResponse {\n  if (!hasErrors(body) && (body as any)?.error) {\n    body = { errors: [{ message: (body as any).error }] };\n  }\n  return { body, response };\n}\n","import { now } from './utils';\n\n// @ts-ignore\nimport { atob } from './base64';\n\nconst webdriver = (): boolean => {\n  return (\n    navigator.webdriver ||\n    !!document.documentElement.getAttribute(atob('d2ViZHJpdmVy')) ||\n    // @ts-ignore\n    !!window.callPhantom ||\n    // @ts-ignore\n    !!window._phantom\n  );\n};\n\nexport class Session {\n  loadedAt: number;\n  webdriver: boolean;\n\n  constructor() {\n    this.loadedAt = now();\n    this.webdriver = webdriver();\n  }\n\n  teardown(): void {}\n\n  data(): {\n    loadedAt: number;\n    webdriver: boolean;\n  } {\n    return {\n      loadedAt: this.loadedAt,\n      webdriver: this.webdriver\n    };\n  }\n}\n","import { Stripe } from '@stripe/stripe-js';\nimport {\n  hasErrors,\n  SubmissionData,\n  SubmissionOptions,\n  SubmissionBody,\n  SubmissionResponse\n} from './forms';\nimport {\n  appendExtraData,\n  clientHeader,\n  encode64,\n  handleLegacyErrorPayload,\n  handleSCA\n} from './utils';\nimport { Session } from './session';\n\nexport interface Config {\n  project?: string;\n  stripePromise?: Stripe;\n}\n\nexport class Client {\n  project: string | undefined;\n  stripePromise: Stripe | undefined;\n  private session: Session | undefined;\n\n  constructor(config: Config = {}) {\n    this.project = config.project;\n    this.stripePromise = config.stripePromise;\n    if (typeof window !== 'undefined') this.startBrowserSession();\n  }\n\n  /**\n   * Starts a browser session.\n   */\n  startBrowserSession(): void {\n    if (!this.session) {\n      this.session = new Session();\n    }\n  }\n\n  /**\n   * Teardown the client session.\n   */\n  teardown(): void {\n    if (this.session) this.session.teardown();\n  }\n\n  /**\n   * Submit a form.\n   *\n   * @param formKey - The form key.\n   * @param data - An object or FormData instance containing submission data.\n   * @param args - An object of form submission data.\n   */\n  async submitForm(\n    formKey: string,\n    data: SubmissionData,\n    opts: SubmissionOptions = {}\n  ): Promise<SubmissionResponse> {\n    let endpoint = opts.endpoint || 'https://formspree.io';\n    let fetchImpl = opts.fetchImpl || fetch;\n    let url = this.project\n      ? `${endpoint}/p/${this.project}/f/${formKey}`\n      : `${endpoint}/f/${formKey}`;\n\n    const serializeBody = (data: SubmissionData): FormData | string => {\n      if (data instanceof FormData) return data;\n      return JSON.stringify(data);\n    };\n\n    let headers: { [key: string]: string } = {\n      Accept: 'application/json',\n      'Formspree-Client': clientHeader(opts.clientName)\n    };\n\n    if (this.session) {\n      headers['Formspree-Session-Data'] = encode64(this.session.data());\n    }\n\n    if (!(data instanceof FormData)) {\n      headers['Content-Type'] = 'application/json';\n    }\n\n    let request = {\n      method: 'POST',\n      mode: 'cors' as const,\n      body: serializeBody(data),\n      headers\n    };\n\n    // first check if we need to add the stripe paymentMethod\n    if (this.stripePromise && opts.createPaymentMethod) {\n      // Get Stripe payload\n      const payload = await opts.createPaymentMethod();\n\n      if (payload.error) {\n        // Return the error in case Stripe failed to create a payment method\n        return {\n          response: null,\n          body: {\n            errors: [\n              {\n                code: 'STRIPE_CLIENT_ERROR',\n                message: 'Error creating payment method',\n                field: 'paymentMethod'\n              }\n            ]\n          }\n        };\n      }\n\n      // Add the paymentMethod to the data\n      appendExtraData(data, 'paymentMethod', payload.paymentMethod.id);\n\n      // Send a request to Formspree server to handle the payment method\n      const response = await fetchImpl(url, {\n        ...request,\n        body: data\n      });\n      const responseData = await response.json();\n\n      // Handle SCA\n      if (\n        responseData &&\n        responseData.stripe &&\n        responseData.stripe.requiresAction &&\n        responseData.resubmitKey\n      ) {\n        return await handleSCA({\n          stripePromise: this.stripePromise,\n          responseData,\n          response,\n          payload,\n          data,\n          fetchImpl,\n          request,\n          url\n        });\n      }\n\n      return handleLegacyErrorPayload({\n        response,\n        body: responseData\n      });\n    } else {\n      return fetchImpl(url, request)\n        .then(response => {\n          return response.json().then(\n            (body: SubmissionBody): SubmissionResponse => {\n              return handleLegacyErrorPayload({ body, response });\n            }\n          );\n        })\n        .catch();\n    }\n  }\n}\n\n/**\n * Constructs the client object.\n */\nexport const createClient = (config?: Config): Client => new Client(config);\n\n/**\n * Fetches the global default client.\n */\nexport const getDefaultClient = (): Client => {\n  if (!defaultClientSingleton) {\n    defaultClientSingleton = createClient();\n  }\n  return defaultClientSingleton;\n};\n\n/**\n * The global default client. Note, this client may not get torn down.\n */\nlet defaultClientSingleton: Client;\n","export { FormspreeProvider, useFormspree, type FormspreeProviderProps, type FromspreeContextType } from './context';\nexport { useForm, CardElement, type TUseForm  } from './useForm';\nexport { ValidationError, type ValidationErrorProps } from './ValidationError';\nexport * from './types'","import React, { useEffect, useState, useContext, lazy, Suspense } from 'react';\nimport {\n  Client,\n  Config,\n  createClient,\n  getDefaultClient\n} from '@formspree/core';\nimport { loadStripe } from '@stripe/stripe-js/pure.js';\nimport { type Stripe } from '@stripe/stripe-js';\n\nconst Elements = lazy(() =>\n  import('@stripe/react-stripe-js').then(module => {\n    return { default: module.Elements };\n  })\n);\n\nexport type FromspreeContextType = {\n  client: Client;\n}\n\nexport type FormspreeProviderProps = {\n  project?: string;\n  children: React.ReactNode;\n  stripePK?: string;\n}\n\nconst FormspreeContext = React.createContext<FromspreeContextType>({\n  client: undefined\n});\n\nFormspreeContext.displayName = 'Formspree';\n\nlet stripePromise: Promise<Stripe>;\n\nconst getStripe = (stripeKey: string) => {\n  if (!stripePromise) {\n    stripePromise = loadStripe(stripeKey);\n  }\n  return stripePromise;\n};\n\nconst handleCreateClient = (promise?: Stripe, project?: string) => {\n  let config: Config = {};\n\n  if (promise) {\n    config.stripePromise = promise;\n  }\n\n  if (project) {\n    config.project = project;\n  }\n\n  return createClient(config);\n};\n\nexport const FormspreeProvider = (props: FormspreeProviderProps) => {\n  const [stateStripePromise, setStateStripePromise] = useState<\n    Stripe | undefined\n  >(undefined);\n  const [client, setClient] = useState<Client>(\n    handleCreateClient(stateStripePromise, props.project)\n  );\n\n  useEffect(() => {\n    client.startBrowserSession();\n\n    return () => {\n      client.teardown();\n    };\n  }, []);\n\n  useEffect(() => {\n    const getStripePromise = async () => {\n      const promiseStripe = await getStripe(props.stripePK);\n      setStateStripePromise(promiseStripe);\n    };\n\n    if (props.stripePK) {\n      getStripePromise();\n    }\n  }, [props.stripePK]);\n\n  useEffect(() => {\n    if (stateStripePromise) {\n      setClient(handleCreateClient(stateStripePromise, props.project));\n    }\n  }, [stateStripePromise]);\n\n  return (\n    <FormspreeContext.Provider value={{ client }}>\n      {props.stripePK ? (\n        <>\n          {stateStripePromise && (\n            <Suspense fallback={<p>....</p>}>\n              <Elements stripe={stateStripePromise}>\n                <>{props.children}</>\n              </Elements>\n            </Suspense>\n          )}\n        </>\n      ) : (\n        <>{props.children}</>\n      )}\n    </FormspreeContext.Provider>\n  );\n};\n\nexport function useFormspree() {\n  const context = useContext(FormspreeContext);\n\n  return context.client\n    ? context\n    : {\n        client: getDefaultClient()\n      };\n}\n","import React, { useState } from 'react';\nimport { Stripe, StripeElements } from '@stripe/stripe-js';\nimport { useElements, CardElement, useStripe } from '@stripe/react-stripe-js';\nimport { useFormspree } from './context';\nimport { ExtraData, ExtraDataValue } from './types';\nimport { version } from '../package.json';\nimport {\n  Client,\n  SubmissionResponse,\n  SubmissionData,\n  ErrorBody,\n  FormError\n} from '@formspree/core';\n\ntype FormEvent = React.FormEvent<HTMLFormElement>;\n\ntype SubmitHandler = (\n  submissionData: FormEvent | SubmissionData\n) => Promise<SubmissionResponse>;\n\ntype ResetFunction = () => void;\n\nexport type TUseForm = [\n  {\n    result: SubmissionResponse | null;\n    submitting: boolean;\n    succeeded: boolean;\n    errors: FormError[];\n  },\n  SubmitHandler,\n  ResetFunction\n];\n\nconst isEvent = (data: FormEvent | SubmissionData): data is FormEvent => {\n  return (data as FormEvent).preventDefault !== undefined;\n};\n\nconst useForm = (\n  formKey: string,\n  args: {\n    client?: Client;\n    data?: ExtraData;\n    endpoint?: string;\n    debug?: boolean;\n  } = {}\n): TUseForm => {\n  const [result, setResult] = useState<SubmissionResponse | null>(null);\n  const [submitting, setSubmitting] = useState(false);\n  const [succeeded, setSucceeded] = useState(false);\n  const [errors, setErrors] = useState([]);\n  const formspreeContext = useFormspree();\n  const client = args.client || formspreeContext;\n  let stripe: Stripe;\n  let elements: StripeElements;\n\n  if (!client) {\n    throw new Error('You must provide a Formspree client');\n  }\n\n  if (!formKey) {\n    throw new Error(\n      'You must provide a form key or hashid ' +\n        '(e.g. useForm(\"myForm\") or useForm(\"123xyz\")'\n    );\n  }\n\n  if (formspreeContext.client && formspreeContext.client.stripePromise) {\n    stripe = useStripe();\n    elements = useElements();\n  }\n\n  const debug = !!args.debug;\n  let extraData = args.data;\n\n  const reset: ResetFunction = () => {\n    setSubmitting(false);\n    setSucceeded(false);\n    setErrors([]);\n  };\n\n  const handleSubmit: SubmitHandler = async submissionData => {\n    const getFormData = async (event: FormEvent) => {\n      event.preventDefault();\n\n      const form = event.target as HTMLFormElement;\n      if (form.tagName != 'FORM') {\n        throw new Error('submit was triggered for a non-form element');\n      }\n      return new FormData(form);\n    };\n\n    let formData = isEvent(submissionData)\n      ? await getFormData(submissionData)\n      : submissionData;\n\n    const appendExtraData = (prop: string, value: string) => {\n      if (formData instanceof FormData) {\n        formData.append(prop, value);\n      } else {\n        formData = Object.assign(formData, { [prop]: value });\n      }\n    };\n\n    // Append extra data from config\n    if (typeof extraData === 'object') {\n      for (const prop in extraData) {\n        let extraDataValue;\n        if (typeof extraData[prop] === 'function') {\n          extraDataValue = (extraData[prop] as Exclude<\n            ExtraDataValue,\n            string\n          >).call(null);\n          if (typeof extraDataValue?.then === 'function') {\n            extraDataValue = await extraDataValue;\n          }\n        } else {\n          extraDataValue = extraData[prop];\n        }\n        if (extraDataValue !== undefined) {\n          appendExtraData(prop, extraDataValue as string);\n        }\n      }\n    }\n\n    const createPaymentMethod = async () => {\n      const address = {\n        ...(formData.address_line1 && {\n          line1: formData.address_line1\n        }),\n        ...(formData.address_line2 && {\n          line2: formData.address_line2\n        }),\n        ...(formData.address_city && {\n          city: formData.address_city\n        }),\n        ...(formData.address_country && {\n          country: formData.address_country\n        }),\n        ...(formData.address_state && {\n          state: formData.address_state\n        }),\n        ...(formData.address_postal_code && {\n          postal_code: formData.address_postal_code\n        })\n      };\n\n      const payload = await stripe.createPaymentMethod({\n        type: 'card',\n        card: elements.getElement(CardElement),\n        billing_details: {\n          ...(formData.name && { name: formData.name }),\n          ...(formData.email && { email: formData.email }),\n          ...(formData.phone && { phone: formData.phone }),\n          ...(address && {\n            address\n          })\n        }\n      });\n\n      return payload;\n    };\n\n    setSubmitting(true);\n\n    return formspreeContext.client\n      .submitForm(formKey, formData, {\n        endpoint: args.endpoint,\n        clientName: `@formspree/react@${version}`,\n        createPaymentMethod:\n          formspreeContext.client && formspreeContext.client.stripePromise\n            ? createPaymentMethod\n            : undefined\n      })\n      .then((result: SubmissionResponse) => {\n        let status = result.response.status;\n        let body;\n\n        if (status === 200) {\n          if (debug) console.log('Form submitted', result);\n          setSucceeded(true);\n          setResult(result);\n          setErrors([]);\n        } else if (status >= 400) {\n          body = result.body as ErrorBody;\n          if (body.errors) {\n            setErrors(body.errors);\n            if (debug) console.log('Error', result);\n          } else {\n            setErrors([{ message: 'Unexpected error' }]);\n            if (debug) console.log('Unexpected error', result);\n          }\n          setSucceeded(false);\n        } else {\n          if (debug) console.log('Unexpected error', result);\n          setSucceeded(false);\n        }\n\n        return result;\n      })\n      .catch((error: Error) => {\n        if (debug) console.log('Unexpected error', error);\n        setSucceeded(false);\n        throw error;\n      })\n      .finally(() => {\n        setSubmitting(false);\n      });\n  };\n\n  return [{ result, submitting, succeeded, errors }, handleSubmit, reset];\n};\n\nexport { CardElement, useForm };\n","import React from 'react';\nimport { FormError } from '@formspree/core';\n\nexport type ValidationErrorProps = {\n  prefix?: string;\n  field?: string;\n  errors: FormError[];\n  [x: string]: any;\n}\n\nexport const ValidationError: React.FC<ValidationErrorProps> = props => {\n  const { prefix, field, errors, ...attrs } = props;\n\n  const error = (errors || []).find(error => {\n    return error.field === field;\n  });\n\n  if (!error) {\n    return null;\n  }\n\n  return (\n    <div {...attrs}>\n      {prefix} {error.message}\n    </div>\n  );\n};\n","import * as Forms from '@formspree/core';\n\nexport { isFieldError } from '@formspree/core';\n\nexport type FormError = Forms.FormError;\nexport type FieldError = Forms.FieldError;\n\n/**\n * ExtraData values can be strings or functions that return a string, or a\n * promise that resolves to a string. Errors should be handled internally.\n * Functions can return undefined to skip this ExtraData value.\n */\nexport type ExtraDataValue =\n  | undefined\n  | string\n  | (() => string)\n  | (() => Promise<string>)\n  | (() => undefined)\n  | (() => Promise<undefined>);\n\nexport type ExtraData = {\n  [key: string]: ExtraDataValue;\n};\n\n// @deprecated\n// Will be removed in next major version\nexport type ErrorPayload = Forms.FormError;\n"],"mappings":"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","names":["src_exports","__export","Client","createClient","getDefaultClient","isFieldError","module","__toCommonJS","FieldErrorCodeEnum","version","stripePromise","data","module","React","import_react","result","import_react","error","React","import_core"]}